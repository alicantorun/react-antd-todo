{"version":3,"sources":["constants/todo.constants.js","reducers/todo.reducer.js","reducers/index.js","helpers/store.js","components/Todos/AddTodoForm/index.js","components/Todos/TodoItem/index.js","components/Todos/TodoList/index.js","actions/todo.js","containers/todos/index.js","routes/index.js","containers/app/index.js","index.js"],"names":["todoConstants","initialState","todos","combineReducers","todo","state","action","type","Object","assign","concat","payload","map","id","completed","filter","reduxPersistConfig","key","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","AddTodoForm","onFormSubmit","useForm","form","onFinish","todoName","name","resetFields","layout","className","gutter","xs","sm","md","lg","xl","Item","rules","required","message","placeholder","htmlType","block","PlusCircleFilled","TodoItem","onTodoRemoval","onTodoToggle","actions","title","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","onChange","defaultChecked","onClick","color","TodoList","locale","emptyText","dataSource","renderItem","pagination","todoActions","addTodo","Math","round","random","toString","dispatch","success","removeTodo","warn","removeTodoSuccess","toggleTodo","info","toggleTodoSuccess","connect","bindActionCreators","justify","align","span","routes","path","exact","component","TodosContainer","App","storePersistor","loading","target","document","getElementById","render"],"mappings":"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","file":"static/js/main.56db780d.chunk.js","sourcesContent":["export const todoConstants = {\n  ADD_TODO_SUCCESS: 'ADD_TODO_SUCCESS',\n  TOGGLE_TODO_SUCCESS: 'TOGGLE_TODO_SUCCESS',\n  REMOVE_TODO_SUCCESS: 'REMOVE_TODO_SUCCESS'\n};\n","import { todoConstants } from '../constants';\n\nconst initialState = {\n  todos: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case todoConstants.ADD_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.concat(action.payload)\n      });\n    case todoConstants.TOGGLE_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.map(todo =>\n          todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      });\n    case todoConstants.REMOVE_TODO_SUCCESS:\n      return {\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport todo from './todo.reducer';\n\nexport default combineReducers({\n  todo\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nimport rootReducer from '../reducers';\n\nconst reduxPersistConfig = {\n  key: 'application',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst pReducer = persistReducer(reduxPersistConfig, rootReducer);\n\nexport const store = createStore(pReducer, applyMiddleware(thunk));\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nimport './styles.less';\n\nconst AddTodoForm = ({ onFormSubmit }) => {\n  const [form] = Form.useForm();\n\n  const onFinish = ({ name: todoName }) => {\n    onFormSubmit(todoName);\n\n    form.resetFields();\n  };\n\n  return (\n    <Form\n      form={form}\n      onFinish={onFinish}\n      layout=\"horizontal\"\n      className=\"todo-form\"\n    >\n      <Row gutter={20}>\n        <Col xs={24} sm={24} md={17} lg={19} xl={20}>\n          <Form.Item\n            name={'name'}\n            rules={[{ required: true, message: 'This field is required' }]}\n          >\n            <Input placeholder=\"What needs to be done?\" />\n          </Form.Item>\n        </Col>\n        <Col xs={24} sm={24} md={7} lg={5} xl={4}>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            <PlusCircleFilled />\n            Add\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default AddTodoForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tooltip, Tag, List, Button } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport { Switch } from 'antd';\n\nimport './styles.less';\n\nconst TodoItem = ({ todo, onTodoRemoval, onTodoToggle }) => {\n  return (\n    <List.Item\n      actions={[\n        <Tooltip\n          title={todo.completed ? 'Mark as uncompleted' : 'Mark as completed'}\n        >\n          <Switch\n            checkedChildren={<CheckOutlined />}\n            unCheckedChildren={<CloseOutlined />}\n            onChange={() => onTodoToggle(todo.id)}\n            defaultChecked={todo.completed}\n          />\n        </Tooltip>,\n        <Tooltip title=\"Remove Todo\">\n          <Button\n            className=\"remove-todo-button\"\n            type=\"danger\"\n            onClick={() => onTodoRemoval(todo.id)}\n          >\n            X\n          </Button>\n        </Tooltip>\n      ]}\n      className=\"list-item\"\n      key={todo.id}\n    >\n      <div className=\"todo-item\">\n        <Tag color={todo.completed ? 'cyan' : 'red'} className=\"todo-tag\">\n          {todo.name}\n        </Tag>\n      </div>\n    </List.Item>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  onTodoRemoval: PropTypes.func.isRequired,\n  onTodoToggle: PropTypes.func.isRequired\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { List } from 'antd';\n\nimport TodoItem from '../TodoItem';\n\nconst TodoList = ({ todos, onTodoRemoval, onTodoToggle }) => (\n  <List\n    locale={{\n      emptyText: \"There's nothing to do :(\"\n    }}\n    dataSource={todos}\n    renderItem={todo => (\n      <TodoItem\n        todo={todo}\n        onTodoToggle={onTodoToggle}\n        onTodoRemoval={onTodoRemoval}\n      />\n    )}\n    pagination={10}\n  />\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  onTodoToggle: PropTypes.func.isRequired,\n  onTodoRemoval: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import { todoConstants } from '../constants';\nimport { message } from 'antd';\n\nconst addTodoSuccess = todo => dispatch => {\n  dispatch({\n    type: todoConstants.ADD_TODO_SUCCESS,\n    payload: todo\n  });\n\n  message.success('Todo added!');\n};\n\nconst toggleTodoSuccess = id => dispatch => {\n  dispatch({\n    type: todoConstants.TOGGLE_TODO_SUCCESS,\n    payload: id\n  });\n\n  message.info('Todo state updated!');\n};\n\nconst removeTodoSuccess = id => dispatch => {\n  dispatch({\n    type: todoConstants.REMOVE_TODO_SUCCESS,\n    payload: id\n  });\n  message.warn('Todo removed!');\n};\n\nconst addTodo = name =>\n  addTodoSuccess({\n    id: Math.round(Math.random() * 36 ** 12).toString(36),\n    name: name,\n    completed: false\n  });\n\nconst toggleTodo = id => toggleTodoSuccess(id);\n\nconst removeTodo = id => removeTodoSuccess(id);\n\nexport const todoActions = {\n  addTodo,\n  removeTodo,\n  toggleTodo\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Row, Col, Card } from 'antd';\n\nimport AddTodoForm from '../../components/Todos/AddTodoForm';\nimport TodoList from '../../components/Todos/TodoList';\n\nimport { todoActions } from '../../actions';\n\nconst TodosContainer = ({ todos, addTodo, removeTodo, toggleTodo }) => {\n  const handleFormSubmit = todo => addTodo(todo);\n\n  const handleTodoRemoval = todo => removeTodo(todo);\n\n  const handleTodoToggle = todo => toggleTodo(todo);\n\n  return (\n    <Row type=\"flex\" justify=\"center\" align=\"middle\">\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <AddTodoForm onFormSubmit={handleFormSubmit} />\n\n        <Card title=\"Todo List\">\n          <TodoList\n            todos={todos}\n            onTodoToggle={handleTodoToggle}\n            onTodoRemoval={handleTodoRemoval}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nTodosContainer.propTypes = {\n  todos: PropTypes.array.isRequired,\n  addTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  toggleTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todo.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      addTodo: todoActions.addTodo,\n      removeTodo: todoActions.removeTodo,\n      toggleTodo: todoActions.toggleTodo\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodosContainer);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport TodosContainer from '../containers/todos';\n\nconst routes = () => (\n  <Switch>\n    <Route path=\"/\" exact={true} component={TodosContainer} />\n  </Switch>\n);\n\nexport default routes;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport Routes from '../../routes';\n\nconst App = ({ store, storePersistor }) => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<div>Loading...</div>} persistor={storePersistor}>\n        <HashRouter>\n          <Routes />\n        </HashRouter>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nApp.propTypes = {\n  store: PropTypes.object.isRequired,\n  storePersistor: PropTypes.object.isRequired\n};\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\n\nimport { store, persistor } from './helpers';\n\nimport './assets/styles/base.less';\n\nimport App from './containers/app';\n\nconst target = document.getElementById('root');\n\nrender(<App store={store} storePersistor={persistor} />, target);\n"],"sourceRoot":""}