{"version":3,"sources":["store/todo/constants/todo.constants.ts","store/todo/reducers/todo.reducer.ts","store/todo/reducers/index.ts","store/app.store.ts","components/AddTodoForm/index.tsx","components/TodoItem/index.tsx","components/TodoList/index.tsx","containers/todos/index.tsx","store/todo/actions/todo.actions.ts","routes/index.tsx","containers/app/index.tsx","index.tsx"],"names":["TODO_CONSTANTS","initialState","todos","rootReducer","combineReducers","todo","state","action","type","Object","assign","concat","payload","id","uuidV1","map","completed","filter","reduxPersistConfig","key","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","AddTodoForm","onFormSubmit","useForm","form","onFinish","name","getFieldValue","resetFields","layout","className","gutter","xs","sm","md","lg","xl","Item","rules","required","message","placeholder","htmlType","block","PlusCircleFilled","TodoItem","onTodoRemoval","onTodoToggle","actions","title","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","onChange","defaultChecked","onConfirm","color","TodoList","locale","emptyText","dataSource","renderItem","pagination","position","pageSize","TodosContainer","useSelector","dispatch","useDispatch","justify","align","span","subTitle","addTodo","success","removeTodo","warn","toggleTodo","info","Routes","path","exact","component","App","storePersistor","loading","targetHTMLElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.33f2af07.chunk.js","sourcesContent":["export const TODO_CONSTANTS = {\n  ADD_TODO_SUCCESS: 'ADD_TODO_SUCCESS',\n  TOGGLE_TODO_SUCCESS: 'TOGGLE_TODO_SUCCESS',\n  REMOVE_TODO_SUCCESS: 'REMOVE_TODO_SUCCESS'\n};\n","import { TODO_CONSTANTS } from 'store/todo/constants';\nimport { Todo } from 'store/todo/models/todo.model';\nimport { TodoActionTypes } from 'store/todo/actions/todo.actions.types';\nimport { v1 as uuidV1 } from 'uuid';\n\ninterface TodoReducerInterface {\n  todos: Todo[];\n}\n\nconst initialState: TodoReducerInterface = {\n  todos: []\n};\n\nexport const todoReducer = (state = initialState, action: TodoActionTypes) => {\n  switch (action.type) {\n    case TODO_CONSTANTS.ADD_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.concat({\n          ...action.payload,\n          ...{\n            id: uuidV1()\n          }\n        })\n      });\n\n    case TODO_CONSTANTS.TOGGLE_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.map((todo: Todo) =>\n          todo.id === action.payload.id\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      });\n    case TODO_CONSTANTS.REMOVE_TODO_SUCCESS:\n      return {\n        todos: state.todos.filter((todo: Todo) => todo.id !== action.payload.id)\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { todoReducer } from './todo.reducer';\n\nexport const rootReducer = combineReducers({\n  todo: todoReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { createStore, applyMiddleware, Store } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer, PersistConfig } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\n\nimport { rootReducer } from 'store/todo/reducers';\n\nconst reduxPersistConfig: PersistConfig<any> = {\n  key: 'application',\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst pReducer = persistReducer(reduxPersistConfig, rootReducer);\n\nexport const store: Store = createStore(pReducer, applyMiddleware(thunk));\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport { Form, Row, Col, Button, Input } from 'antd';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nimport './styles.less';\nimport { Todo } from 'store/todo/models/todo.model';\n\ninterface AddTodoFormProps {\n  onFormSubmit: (todo: Todo) => void;\n}\n\nexport const AddTodoForm: React.StatelessComponent<AddTodoFormProps> = ({\n  onFormSubmit\n}) => {\n  const [form] = Form.useForm();\n\n  const onFinish = () => {\n    onFormSubmit({\n      name: form.getFieldValue('name')\n    });\n\n    form.resetFields();\n  };\n\n  return (\n    <Form\n      form={form}\n      onFinish={onFinish}\n      layout=\"horizontal\"\n      className=\"todo-form\"\n    >\n      <Row gutter={20}>\n        <Col xs={24} sm={24} md={17} lg={19} xl={20}>\n          <Form.Item\n            name={'name'}\n            rules={[{ required: true, message: 'This field is required' }]}\n          >\n            <Input placeholder=\"What needs to be done?\" />\n          </Form.Item>\n        </Col>\n        <Col xs={24} sm={24} md={7} lg={5} xl={4}>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            <PlusCircleFilled />\n            Add todo\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n","import React from 'react';\nimport { Tooltip, Tag, List, Button, Popconfirm } from 'antd';\nimport { CloseOutlined, CheckOutlined } from '@ant-design/icons';\nimport { Switch } from 'antd';\n\nimport './styles.less';\nimport { Todo } from 'store/todo/models/todo.model';\n\ninterface TodoItemProps {\n  todo: Todo;\n  onTodoRemoval: (todo: Todo) => void;\n  onTodoToggle: (todo: Todo) => void;\n}\n\nexport const TodoItem: React.StatelessComponent<TodoItemProps> = ({\n  todo,\n  onTodoRemoval,\n  onTodoToggle,\n}) => {\n  return (\n    <List.Item\n      actions={[\n        <Tooltip\n          title={todo.completed ? 'Mark as uncompleted' : 'Mark as completed'}\n        >\n          <Switch\n            checkedChildren={<CheckOutlined />}\n            unCheckedChildren={<CloseOutlined />}\n            onChange={() => onTodoToggle(todo)}\n            defaultChecked={todo.completed}\n          />\n        </Tooltip>,\n        <Tooltip title=\"Remove Todo\">\n          <Popconfirm\n            title=\"Are you sure you want to delete?\"\n            onConfirm={() => {\n              onTodoRemoval(todo);\n            }}\n          >\n            <Button className=\"remove-todo-button\" type=\"danger\">\n              X\n            </Button>\n          </Popconfirm>\n        </Tooltip>,\n      ]}\n      className=\"list-item\"\n      key={todo.id}\n    >\n      <div className=\"todo-item\">\n        <Tag color={todo.completed ? 'cyan' : 'red'} className=\"todo-tag\">\n          {todo.name}\n        </Tag>\n      </div>\n    </List.Item>\n  );\n};\n","import React from 'react';\n\nimport { List } from 'antd';\n\nimport { Todo } from 'store/todo/models/todo.model';\nimport { TodoItem } from 'components/TodoItem';\n\ninterface TodoListProps {\n  todos: Todo[];\n  onTodoRemoval: (todo: Todo) => void;\n  onTodoToggle: (todo: Todo) => void;\n}\n\nexport const TodoList: React.StatelessComponent<TodoListProps> = ({\n  todos,\n  onTodoRemoval,\n  onTodoToggle\n}) => (\n  <List\n    locale={{\n      emptyText: \"There's nothing to do :(\"\n    }}\n    dataSource={todos}\n    renderItem={todo => (\n      <TodoItem\n        todo={todo}\n        onTodoToggle={onTodoToggle}\n        onTodoRemoval={onTodoRemoval}\n      />\n    )}\n    pagination={{\n      position: 'bottom',\n      pageSize: 10\n    }}\n  />\n);\n","import React from 'react';\nimport { Row, Col, Card, PageHeader } from 'antd';\n\nimport { Todo } from 'store/todo/models/todo.model';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTodo, removeTodo, toggleTodo } from 'store/todo/actions';\nimport { RootState } from 'store/todo/reducers';\nimport { AddTodoForm } from 'components/AddTodoForm';\nimport { TodoList } from 'components/TodoList';\nimport { message } from 'antd';\n\nimport './styles.less';\n\ninterface TodosContainerProps {}\n\nexport const TodosContainer: React.FunctionComponent<TodosContainerProps> = () => {\n  const todos: Todo[] = useSelector((state: RootState) => state.todo.todos);\n\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = (todo: Todo): void => {\n    dispatch(addTodo(todo));\n    message.success('Todo added!');\n  };\n\n  const handleRemoveTodo = (todo: Todo): void => {\n    dispatch(removeTodo(todo));\n    message.warn('Todo removed!');\n  };\n\n  const handleTodoToggle = (todo: Todo): void => {\n    dispatch(toggleTodo(todo));\n    message.info('Todo state updated!');\n  };\n\n  return (\n    <Row\n      justify=\"center\"\n      align=\"middle\"\n      gutter={[0, 20]}\n      className=\"todos-container\"\n    >\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <PageHeader\n          title=\"Add Todo\"\n          subTitle=\"To add a todo, just fill the form below and click in add todo.\"\n        />\n      </Col>\n\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <Card title=\"Create a new todo\">\n          <AddTodoForm onFormSubmit={handleFormSubmit} />\n        </Card>\n      </Col>\n\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <Card title=\"Todo List\">\n          <TodoList\n            todos={todos}\n            onTodoRemoval={handleRemoveTodo}\n            onTodoToggle={handleTodoToggle}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n","import { Todo } from 'store/todo/models/todo.model';\nimport { TodoActionTypes } from 'store/todo/actions/todo.actions.types';\nimport { TODO_CONSTANTS } from 'store/todo/constants';\n\nexport function addTodo(todo: Todo): TodoActionTypes {\n  return {\n    type: TODO_CONSTANTS.ADD_TODO_SUCCESS,\n    payload: todo\n  };\n}\n\nexport function removeTodo(todo: Todo): TodoActionTypes {\n  return {\n    type: TODO_CONSTANTS.REMOVE_TODO_SUCCESS,\n    payload: todo\n  };\n}\n\nexport function toggleTodo(todo: Todo): TodoActionTypes {\n  return {\n    type: TODO_CONSTANTS.TOGGLE_TODO_SUCCESS,\n    payload: todo\n  };\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { TodosContainer } from 'containers/todos';\n\ninterface RoutesProps {}\n\nexport const Routes: React.StatelessComponent<RoutesProps> = () => (\n  <Switch>\n    <Route path=\"/\" exact={true} component={TodosContainer} />\n  </Switch>\n);\n","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Routes } from 'routes';\nimport { Store } from 'redux';\nimport { Persistor } from 'redux-persist';\n\ninterface AppProps {\n  store: Store;\n  storePersistor: Persistor;\n}\n\nexport const App: React.StatelessComponent<AppProps> = ({\n  store,\n  storePersistor\n}) => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<div>Loading...</div>} persistor={storePersistor}>\n        <HashRouter>\n          <Routes />\n        </HashRouter>\n      </PersistGate>\n    </Provider>\n  );\n};\n","import React from 'react';\n\nimport 'assets/styles/base.less';\n\nimport { render } from 'react-dom';\n\nimport { store, persistor } from 'store/app.store';\n\nimport { App } from 'containers/app';\n\nconst targetHTMLElement = document.getElementById('root');\n\nrender(<App store={store} storePersistor={persistor} />, targetHTMLElement);\n"],"sourceRoot":""}